(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[313],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6141:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return c}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=["components"],s={id:"financing-adapter",title:"Financing"},p={unversionedId:"adapters/funding/financing-adapter",id:"adapters/funding/financing-adapter",isDocsHomePage:!1,title:"Financing",description:"Financing is the process in which an applicant, member or a non-member of the DAO, submits a proposal asking for funds. If the proposal passes, the funds are released to the applicant.",source:"@site/docs/adapters/funding/Financing.md",sourceDirName:"adapters/funding",slug:"/adapters/funding/financing-adapter",permalink:"/tribute-contracts/docs/adapters/funding/financing-adapter",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/adapters/funding/Financing.md",version:"current",frontMatter:{id:"financing-adapter",title:"Financing"},sidebar:"adapters",previous:{title:"Withdraw",permalink:"/tribute-contracts/docs/adapters/distribution/withdraw-adapter"},next:{title:"Guild Kick",permalink:"/tribute-contracts/docs/adapters/exiting/guild-kick-adapter"}},l=[{value:"Adapter workflow",id:"adapter-workflow",children:[]},{value:"Adapter configuration",id:"adapter-configuration",children:[]},{value:"Adapter state",id:"adapter-state",children:[]},{value:"Dependencies and interactions (internal / external)",id:"dependencies-and-interactions-internal--external",children:[]},{value:"Functions description and assumptions / checks",id:"functions-description-and-assumptions--checks",children:[{value:"receive() external payable",id:"receive-external-payable",children:[]},{value:"function submitProposal",id:"function-submitproposal",children:[]},{value:"function processProposal",id:"function-processproposal",children:[]}]},{value:"Events",id:"events",children:[]}],d={toc:l};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Financing is the process in which an applicant, member or a non-member of the DAO, submits a proposal asking for funds. If the proposal passes, the funds are released to the applicant."),(0,o.kt)("p",null,"The main goal is to allow individuals and/or organizations to request funds to finance their projects, and the members of the DAO have the power to vote and decide which projects should be funded."),(0,o.kt)("h2",{id:"adapter-workflow"},"Adapter workflow"),(0,o.kt)("p",null,"In order to request funds from the DAO, the applicant must submit a proposal in which one must specify the desired amount and the token address to receive the funds."),(0,o.kt)("p",null,"The applicant address cannot be a reserved address, which means the address is already reserved for the DAO internal usage. Also, the token address must be allowed/supported by the DAO Bank. If these two conditions are not met, the funding proposal is not created."),(0,o.kt)("h2",{id:"adapter-configuration"},"Adapter configuration"),(0,o.kt)("p",null,"Tokens that are provided by the member have to be allowed/supported by the DAO."),(0,o.kt)("p",null,"The member needs to have enough units and/or loot in order to convert it to funds."),(0,o.kt)("p",null,"DAORegistry Access Flags: ",(0,o.kt)("inlineCode",{parentName:"p"},"SUBMIT_PROPOSAL"),"."),(0,o.kt)("p",null,"Bank Extension Access Flags: ",(0,o.kt)("inlineCode",{parentName:"p"},"ADD_TO_BALANCE"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SUB_FROM_BALANCE"),"."),(0,o.kt)("h2",{id:"adapter-state"},"Adapter state"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"proposals"),": all financing proposals handled by each DAO."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ProposalDetails"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"applicant"),": the proposal applicant address, cannot be a reserved address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount"),": the amount requested for funding."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token"),": the token address in which the funding is made to the applicant, needs to be allowed/supported by the DAO Bank.")))),(0,o.kt)("h2",{id:"dependencies-and-interactions-internal--external"},"Dependencies and interactions (internal / external)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"BankExtension"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"checks if the provided token is allowed/supported by the Bank."),(0,o.kt)("li",{parentName:"ul"},"subtracts from Guild balance the requested amount based on the provided token."),(0,o.kt)("li",{parentName:"ul"},"adds to the applicant account the subtracted amount based on the provided token."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DaoRegistry"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"gets Bank extension address."),(0,o.kt)("li",{parentName:"ul"},"checks if member address is not reserved."),(0,o.kt)("li",{parentName:"ul"},"submits/sponsors/processes the financing proposal."),(0,o.kt)("li",{parentName:"ul"},"gets Voting adapter address."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Voting"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"gets address that sent the sponsorProposal transaction."),(0,o.kt)("li",{parentName:"ul"},"starts new voting for the financing proposal."),(0,o.kt)("li",{parentName:"ul"},"checks the voting results.")))),(0,o.kt)("h2",{id:"functions-description-and-assumptions--checks"},"Functions description and assumptions / checks"),(0,o.kt)("h3",{id:"receive-external-payable"},"receive() external payable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice default fallback function to prevent from sending ether to the contract.\n     */\n    receive() external payable\n")),(0,o.kt)("h3",{id:"function-submitproposal"},"function submitProposal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Creates and sponsors a financing proposal.\n     * @dev Applicant address must not be reserved.\n     * @dev Token address must be allowed/supported by the DAO Bank.\n     * @dev Requested amount must be greater than zero.\n     * @dev Only members of the DAO can sponsor a financing proposal.\n     * @param dao The DAO Address.\n     * @param proposalId The proposal id.\n     * @param applicant The applicant address.\n     * @param token The token to receive the funds.\n     * @param amount The desired amount.\n     * @param details Additional detais about the financing proposal.\n     */\n    function submitProposal(\n        DaoRegistry dao,\n        bytes32 proposalId,\n        address applicant,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) external override\n")),(0,o.kt)("h3",{id:"function-processproposal"},"function processProposal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Processing a financing proposal to grant the requested funds.\n     * @dev Only proposals that were not processed are accepted.\n     * @dev Only proposals that were sponsored are accepted.\n     * @dev Only proposals that passed can get processed and have the funds released.\n     * @param dao The DAO Address.\n     * @param proposalId The proposal id.\n     */\n    function processProposal(DaoRegistry dao, bytes32 proposalId)\n        external\n        override\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("p",null,"No events are emitted from this adapter."))}c.isMDXComponent=!0}}]);