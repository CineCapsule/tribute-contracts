(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[326],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,m=p["".concat(d,".").concat(f)]||p[f]||l[f]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4033:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return d},toc:function(){return c},default:function(){return l}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),s=["components"],i={id:"dao-factory",title:"Factory"},d={unversionedId:"core/dao-factory",id:"core/dao-factory",isDocsHomePage:!1,title:"Factory",description:"The DaoFactory uses the CloneFactory to let you create a cost effective DaoRegistry and initialize and configure it properly.",source:"@site/docs/core/DaoFactory.md",sourceDirName:"core",slug:"/core/dao-factory",permalink:"/docs/core/dao-factory",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/core/DaoFactory.md",version:"current",frontMatter:{id:"dao-factory",title:"Factory"},sidebar:"core",previous:{title:"Introduction",permalink:"/docs/core"},next:{title:"Registry",permalink:"/docs/core/dao-registry"}},c=[{value:"DaoFactory state",id:"daofactory-state",children:[]},{value:"Functions description and assumptions / checks",id:"functions-description-and-assumptions--checks",children:[{value:"function createDao",id:"function-createdao",children:[]},{value:"function getDaoAddress",id:"function-getdaoaddress",children:[]},{value:"function addAdapters",id:"function-addadapters",children:[]},{value:"function configureExtension",id:"function-configureextension",children:[]},{value:"function updateAdapter",id:"function-updateadapter",children:[]}]},{value:"Events",id:"events",children:[{value:"event DAOCreated",id:"event-daocreated",children:[]}]}],u={toc:c};function l(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The DaoFactory uses the CloneFactory to let you create a cost effective DaoRegistry and initialize and configure it properly.\nIt also serves as a registry of created DAOs to help others find a DAO by name."),(0,o.kt)("h2",{id:"daofactory-state"},"DaoFactory state"),(0,o.kt)("p",null,"The state consists of two mappings to get the sha3(name) of a DAO given an address and the address given the sha3(name)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mapping(address => bytes32) public daos"),"\n",(0,o.kt)("strong",{parentName:"p"},"mapping(bytes32 => address) public addresses")),(0,o.kt)("p",null,"We also have the address of the identityDao ",(0,o.kt)("strong",{parentName:"p"},"address public identityAddress")," that is being used to clone the DAO."),(0,o.kt)("h2",{id:"functions-description-and-assumptions--checks"},"Functions description and assumptions / checks"),(0,o.kt)("h3",{id:"function-createdao"},"function createDao"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Creates and initializes a new DaoRegistry with the DAO creator and the transaction sender.\n     * @notice Enters the new DaoRegistry in the DaoFactory state.\n     * @dev The daoName must not already have been taken.\n     * @param daoName The name of the DAO which, after being hashed, is used to access the address.\n     * @param creator The DAO's creator, who will be an initial member.\n     */\n    function createDao(string calldata daoName, address creator) external\n")),(0,o.kt)("h3",{id:"function-getdaoaddress"},"function getDaoAddress"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Returns the DAO address based on its name.\n     * @return The address of a DAO, given its name.\n     * @param daoName Name of the DAO to be searched.\n     */\n    function getDaoAddress(string calldata daoName)\n        public\n        view\n        returns (address)\n")),(0,o.kt)("h3",{id:"function-addadapters"},"function addAdapters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Adds adapters and sets their ACL for DaoRegistry functions.\n     * @dev A new DAO is instantiated with only the Core Modules enabled, to reduce the call cost. This call must be made to add adapters.\n     * @dev The message sender must be an active member of the DAO.\n     * @dev The DAO must be in `CREATION` state.\n     * @param dao DaoRegistry to have adapters added to.\n     * @param adapters Adapter structs to be added to the DAO.\n     */\n    function addAdapters(DaoRegistry dao, Adapter[] calldata adapters)\n        external\n")),(0,o.kt)("h3",{id:"function-configureextension"},"function configureExtension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Configures extension to set the ACL for each adapter that needs to access the extension.\n     * @dev The message sender must be an active member of the DAO.\n     * @dev The DAO must be in `CREATION` state.\n     * @param dao DaoRegistry for which the extension is being configured.\n     * @param extension The address of the extension to be configured.\n     * @param adapters Adapter structs for which the ACL is being set for the extension.\n     */\n    function configureExtension(\n        DaoRegistry dao,\n        address extension,\n        Adapter[] calldata adapters\n    ) external\n")),(0,o.kt)("h3",{id:"function-updateadapter"},"function updateAdapter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Removes an adapter with a given ID from a DAO, and adds a new one of the same ID.\n     * @dev The message sender must be an active member of the DAO.\n     * @dev The DAO must be in `CREATION` state.\n     * @param dao DAO to be updated.\n     * @param adapter Adapter that will be replacing the currently-existing adapter of the same ID.\n     */\n    function updateAdapter(DaoRegistry dao, Adapter calldata adapter) external\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"event-daocreated"},"event DAOCreated"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Event emitted when a new DAO has been created.\n     * @param _address The DAO address.\n     * @param _name The DAO name.\n     */\n    event DAOCreated(address _address, string _name)\n")))}l.isMDXComponent=!0}}]);