(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6892],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=u(t),h=a,m=p["".concat(s,".").concat(h)]||p[h]||l[h]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5009:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return d},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],d={id:"coupon-onboarding-adapter",title:"Coupon"},s={unversionedId:"contracts/adapters/onboarding/coupon-onboarding-adapter",id:"contracts/adapters/onboarding/coupon-onboarding-adapter",isDocsHomePage:!1,title:"Coupon",description:"The CouponOnboarding adapter provides a way to onboard an initial group of members quickly without requiring multiple proposals.",source:"@site/docs/contracts/adapters/onboarding/CouponOnboarding.md",sourceDirName:"contracts/adapters/onboarding",slug:"/contracts/adapters/onboarding/coupon-onboarding-adapter",permalink:"/tribute-contracts/docs/contracts/adapters/onboarding/coupon-onboarding-adapter",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/contracts/adapters/onboarding/CouponOnboarding.md",version:"current",frontMatter:{id:"coupon-onboarding-adapter",title:"Coupon"},sidebar:"docs",previous:{title:"Rage Quit",permalink:"/tribute-contracts/docs/contracts/adapters/exiting/rage-quit-adapter"},next:{title:"ERC20/ETH",permalink:"/tribute-contracts/docs/contracts/adapters/onboarding/onboarding-adapter"}},u=[{value:"Workflow",id:"workflow",children:[]},{value:"Access Flags",id:"access-flags",children:[{value:"DAORegistry",id:"daoregistry",children:[]},{value:"Bank",id:"bank",children:[]}]},{value:"Structs",id:"structs",children:[{value:"Coupon",id:"coupon",children:[]}]},{value:"Storage",id:"storage",children:[{value:"_chainId",id:"_chainid",children:[]},{value:"_flags",id:"_flags",children:[]},{value:"signerAddress",id:"signeraddress",children:[]},{value:"tokenAddrToMint",id:"tokenaddrtomint",children:[]}]},{value:"Dependencies",id:"dependencies",children:[{value:"Bank",id:"bank-1",children:[]},{value:"DAORegistry",id:"daoregistry-1",children:[]}]},{value:"Functions",id:"functions",children:[{value:"receive",id:"receive",children:[]},{value:"configure",id:"configure",children:[]},{value:"hashCouponMessage",id:"hashcouponmessage",children:[]},{value:"redeemCoupon",id:"redeemcoupon",children:[]}]},{value:"Events",id:"events",children:[{value:"CouponRedeemed",id:"couponredeemed",children:[]}]}],c={toc:u};function l(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The CouponOnboarding adapter provides a way to onboard an initial group of members quickly without requiring multiple proposals."),(0,o.kt)("p",null,"The DAO creator can produce and sign coupons which allow redemption of a particular number of units by a given address. When the coupon is redeemed the units are directly issued to the new member."),(0,o.kt)("h2",{id:"workflow"},"Workflow"),(0,o.kt)("p",null,"Redeem coupon request"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"check that the coupon has not already been redeemed"),(0,o.kt)("li",{parentName:"ul"},"check that the signed hash matches the hash of the redeem arguments"),(0,o.kt)("li",{parentName:"ul"},"check that the signer of the coupon matches the configured signer"),(0,o.kt)("li",{parentName:"ul"},"mint the configured tokens to the new member"),(0,o.kt)("li",{parentName:"ul"},"mark the coupon redeemed")),(0,o.kt)("h2",{id:"access-flags"},"Access Flags"),(0,o.kt)("h3",{id:"daoregistry"},"DAORegistry"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NEW_MEMBER"))),(0,o.kt)("h3",{id:"bank"},"Bank"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ADD_TO_BALANCE"))),(0,o.kt)("h2",{id:"structs"},"Structs"),(0,o.kt)("h3",{id:"coupon"},"Coupon"),(0,o.kt)("p",null,"The coupon structure contains the data fields necessary to redeem and add a new member."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"authorizedMember"),": The address that this coupon authorized to become a new member."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount"),": The amount of units that this member will receive."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nonce"),": A unique identifier for this coupon request.")),(0,o.kt)("h2",{id:"storage"},"Storage"),(0,o.kt)("h3",{id:"_chainid"},"_","chainId"),(0,o.kt)("p",null,"The chain id in which it has been deployed, which is used to hash the coupon message."),(0,o.kt)("h3",{id:"_flags"},"_","flags"),(0,o.kt)("p",null,"Tracks all the coupons that were redeemed per DAO."),(0,o.kt)("h3",{id:"signeraddress"},"signerAddress"),(0,o.kt)("p",null,"The public address of the signer key used to generate coupons for this adapter."),(0,o.kt)("h3",{id:"tokenaddrtomint"},"tokenAddrToMint"),(0,o.kt)("p",null,"The address of the token that will be created and issued to the address in the redeemed coupons."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("h3",{id:"bank-1"},"Bank"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add the member balance to the bank."),(0,o.kt)("li",{parentName:"ul"},"Register a potential new token.")),(0,o.kt)("h3",{id:"daoregistry-1"},"DAORegistry"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read/Write configurations."),(0,o.kt)("li",{parentName:"ul"},"Add a new member.")),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"receive"},"receive"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'/**\n * @notice default fallback function to prevent from sending ether to the contract\n */\nreceive() external payable {\n  revert("fallback revert");\n}\n\n')),(0,o.kt)("h3",{id:"configure"},"configure"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"   /**\n    * @notice Configures the Adapter with the coupon signer address and token to mint.\n    * @param signerAddress is the DAO instance to be configured\n    * @param tokenAddrToMint is the coupon to hash\n    */\n    function configureDao(\n        DaoRegistry dao,\n        address signerAddress,\n        address tokenAddrToMint\n    ) external onlyAdapter(dao)\n")),(0,o.kt)("h3",{id:"hashcouponmessage"},"hashCouponMessage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Hashes the provided coupon as an ERC712 hash.\n     * @param dao is the DAO instance to be configured\n     * @param coupon is the coupon to hash\n     */\n    function hashCouponMessage(DaoRegistry dao, Coupon memory coupon)\n        public\n        view\n        returns (bytes32)\n")),(0,o.kt)("h3",{id:"redeemcoupon"},"redeemCoupon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Redeems a coupon to add a new member.\n     * @param dao is the DAO instance to be configured\n     * @param authorizedMember is the address that this coupon authorized to become a new member\n     * @param amount is the amount of units that this member will receive\n     * @param nonce is a unique identifier for this coupon request\n     * @param signature is message signature for verification\n     */\n    function redeemCoupon(\n        DaoRegistry dao,\n        address authorizedMember,\n        uint256 amount,\n        uint256 nonce,\n        bytes memory signature\n    ) external reentrancyGuard(dao)\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"couponredeemed"},"CouponRedeemed"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"event CouponRedeemed( address daoAddress, uint256 nonce, address authorizedMember, uint256 amount );"))))}l.isMDXComponent=!0}}]);