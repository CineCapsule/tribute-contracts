(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5898],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3186:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),s=["components"],i={id:"financing-adapter",title:"Financing"},l={unversionedId:"contracts/adapters/funding/financing-adapter",id:"contracts/adapters/funding/financing-adapter",isDocsHomePage:!1,title:"Financing",description:"Financing is the process in which an applicant, member or a non-member of the DAO, submits a proposal asking for funds. If the proposal passes, the funds are released to the applicant.",source:"@site/docs/contracts/adapters/funding/Financing.md",sourceDirName:"contracts/adapters/funding",slug:"/contracts/adapters/funding/financing-adapter",permalink:"/tribute-contracts/docs/contracts/adapters/funding/financing-adapter",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/contracts/adapters/funding/Financing.md",version:"current",frontMatter:{id:"financing-adapter",title:"Financing"},sidebar:"docs",previous:{title:"Distribute",permalink:"/tribute-contracts/docs/contracts/adapters/distribution/distribute-adapter"},next:{title:"Guild Kick",permalink:"/tribute-contracts/docs/contracts/adapters/exiting/guild-kick-adapter"}},d=[{value:"Workflow",id:"workflow",children:[]},{value:"Access Flags",id:"access-flags",children:[{value:"DAORegistry",id:"daoregistry",children:[]},{value:"Bank",id:"bank",children:[]}]},{value:"Structs",id:"structs",children:[{value:"ProposalDetails",id:"proposaldetails",children:[]}]},{value:"Storage",id:"storage",children:[{value:"proposals",id:"proposals",children:[]}]},{value:"Dependencies",id:"dependencies",children:[{value:"Bank",id:"bank-1",children:[]},{value:"DaoRegistry",id:"daoregistry-1",children:[]},{value:"Voting",id:"voting",children:[]}]},{value:"Functions",id:"functions",children:[{value:"receive",id:"receive",children:[]},{value:"submitProposal",id:"submitproposal",children:[]},{value:"processProposal",id:"processproposal",children:[]}]},{value:"Events",id:"events",children:[]}],p={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Financing is the process in which an applicant, member or a non-member of the DAO, submits a proposal asking for funds. If the proposal passes, the funds are released to the applicant."),(0,o.kt)("p",null,"The main goal is to allow individuals and/or organizations to request funds to finance their projects, and the members of the DAO have the power to vote and decide which projects should be funded."),(0,o.kt)("h2",{id:"workflow"},"Workflow"),(0,o.kt)("p",null,"In order to request funds from the DAO, the applicant must submit a proposal in which one must specify the desired amount and the token address to receive the funds."),(0,o.kt)("p",null,"The applicant address cannot be a reserved address, which means the address is already reserved for the DAO internal usage. Also, the token address must be allowed/supported by the DAO Bank. If these two conditions are not met, the funding proposal is not created."),(0,o.kt)("h2",{id:"access-flags"},"Access Flags"),(0,o.kt)("h3",{id:"daoregistry"},"DAORegistry"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SUBMIT_PROPOSAL"),".")),(0,o.kt)("h3",{id:"bank"},"Bank"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ADD_TO_BALANCE"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"SUB_FROM_BALANCE"),".")),(0,o.kt)("h2",{id:"structs"},"Structs"),(0,o.kt)("h3",{id:"proposaldetails"},"ProposalDetails"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"applicant"),": the proposal applicant address, cannot be a reserved address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount"),": the amount requested for funding."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token"),": the token address in which the funding is made to the applicant, needs to be allowed/supported by the DAO Bank.")),(0,o.kt)("h2",{id:"storage"},"Storage"),(0,o.kt)("h3",{id:"proposals"},"proposals"),(0,o.kt)("p",null,"All financing proposals handled by each DAO."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("h3",{id:"bank-1"},"Bank"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"checks if the provided token is allowed/supported by the Bank."),(0,o.kt)("li",{parentName:"ul"},"subtracts from Guild balance the requested amount based on the provided token."),(0,o.kt)("li",{parentName:"ul"},"adds to the applicant account the subtracted amount based on the provided token.")),(0,o.kt)("h3",{id:"daoregistry-1"},"DaoRegistry"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"gets Bank extension address."),(0,o.kt)("li",{parentName:"ul"},"checks if member address is not reserved."),(0,o.kt)("li",{parentName:"ul"},"submits/sponsors/processes the financing proposal."),(0,o.kt)("li",{parentName:"ul"},"gets Voting adapter address.")),(0,o.kt)("h3",{id:"voting"},"Voting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"gets address that sent the sponsorProposal transaction."),(0,o.kt)("li",{parentName:"ul"},"starts new voting for the financing proposal."),(0,o.kt)("li",{parentName:"ul"},"checks the voting results.")),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"receive"},"receive"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice default fallback function to prevent from sending ether to the contract.\n     */\n    receive() external payable\n")),(0,o.kt)("h3",{id:"submitproposal"},"submitProposal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Creates and sponsors a financing proposal.\n     * @dev Applicant address must not be reserved.\n     * @dev Token address must be allowed/supported by the DAO Bank.\n     * @dev Requested amount must be greater than zero.\n     * @dev Only members of the DAO can sponsor a financing proposal.\n     * @param dao The DAO Address.\n     * @param proposalId The proposal id.\n     * @param applicant The applicant address.\n     * @param token The token to receive the funds.\n     * @param amount The desired amount.\n     * @param data Additional details about the financing proposal.\n     */\n    function submitProposal(\n        DaoRegistry dao,\n        bytes32 proposalId,\n        address applicant,\n        address token,\n        uint256 amount,\n        bytes memory data\n    ) external override reentrancyGuard(dao)\n")),(0,o.kt)("h3",{id:"processproposal"},"processProposal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    /**\n     * @notice Processing a financing proposal to grant the requested funds.\n     * @dev Only proposals that were not processed are accepted.\n     * @dev Only proposals that were sponsored are accepted.\n     * @dev Only proposals that passed can get processed and have the funds released.\n     * @param dao The DAO Address.\n     * @param proposalId The proposal id.\n     */\n    function processProposal(DaoRegistry dao, bytes32 proposalId)\n        external\n        override\n        reentrancyGuard(dao)\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("p",null,"No events are emitted."))}c.isMDXComponent=!0}}]);