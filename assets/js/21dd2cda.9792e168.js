(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[962],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(t),p=i,h=f["".concat(d,".").concat(p)]||f[p]||u[p]||a;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6169:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o=["components"],s={id:"nft-extension",title:"NFT"},d={unversionedId:"extensions/nft-extension",id:"extensions/nft-extension",isDocsHomePage:!1,title:"NFT",description:"Extension description and scope",source:"@site/docs/extensions/NFT.md",sourceDirName:"extensions",slug:"/extensions/nft-extension",permalink:"/tribute-contracts/docs/extensions/nft-extension",editUrl:"https://github.com/openlawteam/tribute-contracts/edit/docs/website/docs/extensions/NFT.md",version:"current",frontMatter:{id:"nft-extension",title:"NFT"}},l=[{value:"Extension description and scope",id:"extension-description-and-scope",children:[]},{value:"Extension state",id:"extension-state",children:[]},{value:"Extension functions",id:"extension-functions",children:[{value:"function initialize",id:"function-initialize",children:[]},{value:"function collect",id:"function-collect",children:[]},{value:"function withdrawNFT",id:"function-withdrawnft",children:[]},{value:"function internalTransfer",id:"function-internaltransfer",children:[]},{value:"function getNFTId",id:"function-getnftid",children:[]},{value:"function nbNFTs",id:"function-nbnfts",children:[]},{value:"function getNFT",id:"function-getnft",children:[]},{value:"function nbNFTAddresses",id:"function-nbnftaddresses",children:[]},{value:"function getNFTAddress",id:"function-getnftaddress",children:[]},{value:"function getNFTOwner",id:"function-getnftowner",children:[]},{value:"function onERC721Received",id:"function-onerc721received",children:[]},{value:"function _saveNft",id:"function-_savenft",children:[]}]},{value:"Events",id:"events",children:[]}],c={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"extension-description-and-scope"},"Extension description and scope"),(0,a.kt)("p",null,"An ",(0,a.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#IERC721Receiver"},"IERC721Receiver")," contract safely manages the collection of standard NFTs (ERC721) collected by the DAO."),(0,a.kt)("p",null,"The extension adds to the DAO the capability of managing and curating a collection of standard NFTs. Applicants can join the DAO offering NFTs as tributes, and if their proposal is approved their tributes get stored in the guild NFT collection - which supports tokens in ERC721 standard."),(0,a.kt)("p",null,"In order to join the DAO using a NFT as tribute, the DAO must have the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openlawteam/tribute-contracts/blob/master/docs/adapters/TributeNFT.md"},"TributeNFT Adapter")," pre-configured with the correct ",(0,a.kt)("a",{parentName:"p",href:"#access-flags"},"Access Flags"),"."),(0,a.kt)("h2",{id:"extension-state"},"Extension state"),(0,a.kt)("h4",{id:"bool-public-initialized--false"},"bool public initialized = false;"),(0,a.kt)("p",null,"Internally tracks deployment under eip-1167 proxy pattern."),(0,a.kt)("h4",{id:"daoregistry-public-dao"},"DaoRegistry public dao;"),(0,a.kt)("p",null,"Keeps track of each DAO instance the current contract belongs to."),(0,a.kt)("h4",{id:"access-flags"},"Access Flags"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COLLECT_NFT"),": Allows the caller adapter to transfer the NFT to the GUILD collection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WITHDRAW_NFT"),": Allows the caller to remove the NFT from the GUILD collection and return it to a new owner."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTERNAL_TRANSFER"),": Allows the caller to update the internal ownership of the NFT within the GUILD collection.")),(0,a.kt)("p",null,"Access Control Layer Flags - explicitly grant external call permissions to change the extension state."),(0,a.kt)("h4",{id:"mappingaddress--enumerablesetuintset-private-_nfts"},"mapping(address => EnumerableSet.UintSet) private ","_","nfts;"),(0,a.kt)("p",null,"Tracks all the Token IDs that belong to an NFT address stored in the GUILD collection."),(0,a.kt)("h4",{id:"mappingbytes32--address-private-_ownership"},"mapping(bytes32 => address) private ","_","ownership;"),(0,a.kt)("p",null,"Tracks the internal owner of record of an NFT that has been transferred to the extension."),(0,a.kt)("h4",{id:"enumerablesetaddressset-private-_nftaddresses"},"EnumerableSet.AddressSet private ","_","nftAddresses;"),(0,a.kt)("p",null,"Tracks all the NFTs addresses collected and stored in the GUILD collection."),(0,a.kt)("h2",{id:"extension-functions"},"Extension functions"),(0,a.kt)("h3",{id:"function-initialize"},"function initialize"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Initializes the extension with the DAO address that it belongs to.\n  * @param _dao The address of the DAO that owns the extension.\n  * @param creator The owner of the DAO and Extension that is also a member of the DAO.\n  */\nfunction initialize(DaoRegistry _dao, address creator) external\n")),(0,a.kt)("h3",{id:"function-collect"},"function collect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solitidy"},"/**\n  * @notice Collects the NFT from the owner and moves it to the NFT extension.\n  * @notice It must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n  * @notice The caller must have the ACL Flag: COLLECT_NFT\n  * @dev Reverts if the NFT is not in ERC721 standard.\n  * @param nftAddr The NFT contract address.\n  * @param nftTokenId The NFT token id.\n  */\nfunction collect(\n    address nftAddr,\n    uint256 nftTokenId\n) external\n")),(0,a.kt)("h3",{id:"function-withdrawnft"},"function withdrawNFT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Ttransfers the NFT token from the extension address to the new owner.\n  * @notice It also updates the internal state to keep track of the all the NFTs collected by the extension.\n  * @notice The caller must have the ACL Flag: WITHDRAW_NFT\n  * @dev Reverts if the NFT is not in ERC721 standard.\n  * @param newOwner The address of the new owner.\n  * @param nftAddr The NFT address that must be in ERC721 standard.\n  * @param nftTokenId The NFT token id.\n  */\nfunction withdrawNFT(\n    address newOwner,\n    address nftAddr,\n    uint256 nftTokenId\n) public hasExtensionAccess(this, AclFlag.WITHDRAW_NFT)\n")),(0,a.kt)("h3",{id:"function-internaltransfer"},"function internalTransfer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Updates internally the ownership of the NFT.\n  * @notice The caller must have the ACL Flag: INTERNAL_TRANSFER\n  * @dev Reverts if the NFT is not already internally owned in the extension.\n  * @param nftAddr The NFT address.\n  * @param nftTokenId The NFT token id.\n  * @param newOwner The address of the new owner.\n  */\nfunction transferFrom(\n    address escrowAddr,\n    address nftAddr,\n    address newOwner\n) public hasExtensionAccess(this, AclFlag.INTERNAL_TRANSFER)\n")),(0,a.kt)("h3",{id:"function-getnftid"},"function getNFTId"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Gets ID generated from an NFT address and token id (used internally to map ownership).\n  * @param nftAddress The NFT address.\n  * @param tokenId The NFT token id.\n  */\nfunction getNFTId(address nftAddress, uint256 tokenId)\n    public\n    pure\n    returns (bytes32)\n")),(0,a.kt)("h3",{id:"function-nbnfts"},"function nbNFTs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns the total amount of token ids collected for an NFT address.\n  */\nfunction nbNFTs(address tokenAddr) public view returns (uint256)\n")),(0,a.kt)("h3",{id:"function-getnft"},"function getNFT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns token id associated with an NFT address stored in the GUILD collection at the specified index.\n  * @param tokenAddr The NFT address.\n  * @param index The index to get the token id if it exists.\n  */\nfunction getNFT(address tokenAddr, uint256 index)\n    public\n    view\n    returns (uint256)\n")),(0,a.kt)("h3",{id:"function-nbnftaddresses"},"function nbNFTAddresses"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns the total amount of NFT addresses collected.\n  */\nfunction nbNFTAddresses() external view returns (uint256)\n")),(0,a.kt)("h3",{id:"function-getnftaddress"},"function getNFTAddress"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns NFT address stored in the GUILD collection at the specified index.\n  * @param index The index to get the NFT address if it exists.\n  */\nfunction getNFTAddress(uint256 index) external view returns (address)\n")),(0,a.kt)("h3",{id:"function-getnftowner"},"function getNFTOwner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Returns owner of NFT that has been transferred to the extension.\n  * @param nftAddress The NFT address.\n  * @param tokenId The NFT token id.\n  */\nfunction getNFTOwner(address nftAddress, uint256 tokenId)\n    public\n    view\n    returns (address)\n")),(0,a.kt)("h3",{id:"function-onerc721received"},"function onERC721Received"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Required function from IERC721 standard to be able to receive assets to this contract address.\n  */\nfunction onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n) external pure override returns (bytes4)\n")),(0,a.kt)("h3",{id:"function-_savenft"},"function ","_","saveNft"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n  * @notice Helper function to update the extension states for an NFT collected by the extension.\n  * @param nftAddr The NFT address.\n  * @param nftTokenId The token id.\n  * @param owner The address of the owner.\n  */\nfunction _saveNft(\n    address nftAddr,\n    uint256 nftTokenId,\n    address owner\n) private\n")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CollectedNFT"),": when a NFT is collected/stored into the NFT collection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WithdrawnNFT"),": when a NFT is transferred from the extension to another owner."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TransferredNFT"),": when a NFT is transferred from the escrow adapter to the NFT collection in the extension.")))}u.isMDXComponent=!0}}]);